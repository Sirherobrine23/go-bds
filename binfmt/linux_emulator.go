package binfmt

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"os/exec"
)

var (
	_ Binary = (*LinuxEmulator)(nil)

	emulatorTargets = []*LinuxEmulator{
		{
			GolangArch: "amd64",
			Arch:       "x86_64",
			Magic:      []byte{0x7f, 0x45, 0x4c, 0x46, 0x2, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x3e, 0x0},
		},
		{
			GolangArch: "386",
			Arch:       "i386",
			Magic:      []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x3, 0x0},
		},
		{
			GolangArch: "arm64",
			Arch:       "aarch64",
			Magic:      []byte{0x7f, 0x45, 0x4c, 0x46, 0x2, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0xb7, 0x0},
		},
		{
			GolangArch: "arm64",
			Arch:       "aarch64_be",
			Magic:      []byte{0x7f, 0x45, 0x4c, 0x46, 0x2, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0xb7}},
		{
			Arch:  "arm",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x28, 0x0},
		},
		{
			GolangArch: "arm",
			Arch:       "armeb",
			Magic:      []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x28},
		},
		{
			Arch:  "alpha",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x2, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x26, 0x90},
		},
		{
			Arch:  "hexagon",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0xa4, 0x0},
		},
		{
			Arch:  "hppa",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0xf},
		},
		{
			Arch:  "loongarch64",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x2, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2, 0x1},
		},
		{
			Arch:  "m68k",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x4},
		},
		{
			Arch:  "microblaze",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0xba, 0xab},
		},
		{
			Arch:  "microblazeel",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0xab, 0xba},
		},
		{
			Arch:  "mips",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x8, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		},
		{
			Arch:  "mips64",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x2, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x8},
		},
		{
			Arch:  "mips64el",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x2, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x8, 0x0},
		},
		{
			Arch:  "mipsel",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		},
		{
			Arch:  "mipsn32",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x8, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20},
		},
		{
			Arch:  "mipsn32el",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0},
		},
		{
			Arch:  "or1k",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x5c},
		},
		{
			Arch:  "ppc",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x14},
		},
		{
			Arch:  "ppc64",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x2, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x15},
		},
		{
			Arch:  "ppc64le",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x2, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x15, 0x0},
		},
		{
			Arch:  "riscv32",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0xf3, 0x0},
		},
		{
			Arch:  "riscv64",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x2, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0xf3, 0x0},
		},
		{
			Arch:  "s390x",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x2, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x16},
		},
		{
			Arch:  "sh4",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2a, 0x0},
		},
		{
			Arch:  "sh4eb",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2a},
		},
		{
			Arch:  "sparc",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2},
		},
		{
			Arch:  "sparc32plus",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x12},
		},
		{
			Arch:  "sparc64",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x2, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2b},
		},
		{
			Arch:  "xtensa",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x5e, 0x0},
		},
		{
			Arch:  "xtensaeb",
			Magic: []byte{0x7f, 0x45, 0x4c, 0x46, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x5e},
		},
	}
)

type LinuxEmulator struct {
	GolangArch      string // Golang arch target
	Arch            string // Qemu arch target
	Magic           []byte // Bytes to check fist bytes
	EmulatorCommand []string
}

func (s LinuxEmulator) GoOs() string { return "linux" }
func (s LinuxEmulator) From() any    { return s }

func (s LinuxEmulator) GoArch() string {
	if s.GolangArch != "" {
		return s.GolangArch
	}
	return s.Arch
}

// Open file and check if qemu target, box64 or box86 is avaible to emulater arch
func OpenEmulatorTarget(name string) (Binary, error) {
	f, err := os.Open(name)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	return GetEmulatorTarget(f)
}

// Check if qemu target, box64 or box86 is avaible to emulater arch
func GetEmulatorTarget(r io.ReaderAt) (Binary, error) {
	for _, target := range emulatorTargets {
		emulator := ""
		switch target.GoArch() {
		case "amd64":
			emulator, _ = exec.LookPath("box64")
		case "386":
			emulator, _ = exec.LookPath("box86")
		}
		if emulator == "" {
			if emulator, _ = exec.LookPath(fmt.Sprintf("qemu-%s-static", target.Arch)); emulator == "" {
				if emulator, _ = exec.LookPath(fmt.Sprintf("qemu-%s", target.Arch)); emulator == "" {
					continue
				}
			}
		}

		Magic := make([]byte, len(target.Magic))
		if _, err := r.ReadAt(Magic, 0); err != nil {
			return nil, err
		} else if !bytes.Equal(target.Magic, Magic) {
			continue
		}

		return &LinuxEmulator{
			GolangArch:      target.GolangArch,
			Arch:            target.Arch,
			Magic:           target.Magic[:],
			EmulatorCommand: []string{emulator},
		}, nil
	}
	return nil, ErrNotDetect
}
